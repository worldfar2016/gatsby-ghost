{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/utils/siteConfig.js","webpack:///./src/components/common/Layout.js","webpack:///./src/components/common/PostCard.js","webpack:///./src/components/common/Pagination.js","webpack:///./src/components/common/Navigation.js","webpack:///./src/components/common/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMeta.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/AuthorMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/index.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","a","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","_ref","staticQueryData","data","query","render","finalData","createElement","Fragment","props","children","Consumer","module","exports","siteUrl","postsPerPage","siteTitleMeta","siteDescriptionMeta","shareImageWidth","shareImageHeight","shortTitle","siteIcon","backgroundColor","themeColor","DefaultLayout","bodyClass","isHome","site","allGhostSettings","edges","node","twitterUrl","twitter","replace","facebookUrl","facebook","react_default","Helmet_default","lang","type","codeinjection_styles","className","style","Object","assign","cover_image","backgroundImage","gatsby_browser_entry","to","logo","src","alt","title","gatsby_image_default","fixed","file","childImageSharp","href","target","rel","config","description","common_Navigation","navigation","navClass","DefaultLayoutSettingsQuery","Layout_DefaultLayout","_2417764204","PostCard","post","url","slug","readingTime","readingTimeHelper","feature_image","tags","lib","visibility","autolink","featured","excerpt","primary_author","profile_image","name","Pagination","pageContext","previousPagePath","nextPagePath","humanPageNumber","numberOfPages","role","Navigation","map","navItem","i","match","key","label","defaultProps","Layout","common_PostCard","common_Pagination","m","require","default","getAuthorProperties","primaryAuthor","authorProfiles","push","website","_","compact","sameAsArray","length","join","image","fetchAuthorData","PropTypes","shape","string","isRequired","ImageMeta","content","property","ArticleMetaGhost","settings","canonical","ghostPost","author","publicTags","tagsHelper","fn","tag","primaryTag","shareImage","get","publisherLogo","resolve","meta_title","meta_description","og_title","og_description","published_at","updated_at","keyword","twitter_title","twitter_description","meta_ImageMeta","ArticleMetaQuery","ArticleMeta_ArticleMetaGhost","_1004981455","WebsiteMeta","WebsiteMetaQuery","WebsiteMeta_WebsiteMeta","_3093436507","AuthorMeta","bio","AuthorMetaQuery","AuthorMeta_AuthorMeta","_4112685740","MetaData","location","pathname","ghostTag","ghostAuthor","ghostPage","ArticleMeta","meta_WebsiteMeta","meta_AuthorMeta","MetaDataQuery","MetaData_MetaData","_2233248733","meta_MetaData","ProdPageRenderer","pageResources","InternalPageRenderer","json"],"mappings":"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","file":"3-3d77303caf5ad5fa8f04.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","module.exports = {\n    siteUrl: `https://gatsby.ghost.org`, // Site domain. Do not include a trailing slash!\n\n    postsPerPage: 12, // Number of posts shown on paginated pages (changes this requires sometimes to delete the cache)\n\n    siteTitleMeta: `Ghost Gatsby Starter`, // This allows an alternative site title for meta data for pages.\n    siteDescriptionMeta: `A starter template to build amazing static websites with Ghost and Gatsby`, // This allows an alternative site description for meta data for pages.\n\n    shareImageWidth: 1000, // Change to the width of your default share image\n    shareImageHeight: 523, // Change to the height of your default share image\n\n    shortTitle: `Ghost`, // Used for App manifest e.g. Mobile Home Screen\n    siteIcon: `favicon.png`, // Logo in /static dir used for SEO, RSS, and App manifest\n    backgroundColor: `#e9e9e9`, // Used for Offline Manifest\n    themeColor: `#15171A`, // Used for Offline Manifest\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { Link, StaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport { Navigation } from '.'\nimport config from '../../utils/siteConfig'\n\n// Styles\nimport '../../styles/app.css'\n\n/**\n* Main layout component\n*\n* The Layout component wraps around each page and template.\n* It also provides the header, footer as well as the main\n* styles, and meta data for each page.\n*\n*/\nconst DefaultLayout = ({ data, children, bodyClass, isHome }) => {\n    const site = data.allGhostSettings.edges[0].node\n    const twitterUrl = site.twitter ? `https://twitter.com/${site.twitter.replace(/^@/, ``)}` : null\n    const facebookUrl = site.facebook ? `https://www.facebook.com/${site.facebook.replace(/^\\//, ``)}` : null\n\n    return (\n    <>\n        <Helmet>\n            <html lang={site.lang} />\n            <style type=\"text/css\">{`${site.codeinjection_styles}`}</style>\n            <body className={bodyClass} />\n        </Helmet>\n\n        <div className=\"viewport\">\n\n            <div className=\"viewport-top\">\n                {/* The main header section on top of the screen */}\n                <header className=\"site-head\" style={{ ...site.cover_image && { backgroundImage: `url(${site.cover_image})` } }}>\n                    <div className=\"container\">\n                        <div className=\"site-mast\">\n                            <div className=\"site-mast-left\">\n                                <Link to=\"/\">\n                                    {site.logo ?\n                                        <img className=\"site-logo\" src={site.logo} alt={site.title} />\n                                        : <Img fixed={data.file.childImageSharp.fixed} alt={site.title} />\n                                    }\n                                </Link>\n                            </div>\n                            <div className=\"site-mast-right\">\n                                { site.twitter && <a href={ twitterUrl } className=\"site-nav-item\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/twitter.svg\" alt=\"Twitter\" /></a>}\n                                { site.facebook && <a href={ facebookUrl } className=\"site-nav-item\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/facebook.svg\" alt=\"Facebook\" /></a>}\n                                <a className=\"site-nav-item\" href={ `https://feedly.com/i/subscription/feed/${config.siteUrl}/rss/` } target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/rss.svg\" alt=\"RSS Feed\" /></a>\n                            </div>\n                        </div>\n                        { isHome ?\n                            <div className=\"site-banner\">\n                                <h1 className=\"site-banner-title\">{site.title}</h1>\n                                <p className=\"site-banner-desc\">{site.description}</p>\n                            </div> :\n                            null}\n                        <nav className=\"site-nav\">\n                            <div className=\"site-nav-left\">\n                                {/* The navigation items as setup in Ghost */}\n                                <Navigation data={site.navigation} navClass=\"site-nav-item\" />\n                            </div>\n                            <div className=\"site-nav-right\">\n                                <Link className=\"site-nav-button\" to=\"/about\">About</Link>\n                            </div>\n                        </nav>\n                    </div>\n                </header>\n\n                <main className=\"site-main\">\n                    {/* All the main content gets inserted here, index.js, post.js */}\n                    {children}\n                </main>\n\n            </div>\n\n            <div className=\"viewport-bottom\">\n                {/* The footer at the very bottom of the screen */}\n                <footer className=\"site-foot\">\n                    <div className=\"site-foot-nav container\">\n                        <div className=\"site-foot-nav-left\">\n                            <Link to=\"/\">{site.title}</Link> © 2019 &mdash; Published with <a className=\"site-foot-nav-item\" href=\"https://ghost.org\" target=\"_blank\" rel=\"noopener noreferrer\">Ghost</a>\n                        </div>\n                        <div className=\"site-foot-nav-right\">\n                            <Navigation data={site.navigation} navClass=\"site-foot-nav-item\" />\n                        </div>\n                    </div>\n                </footer>\n\n            </div>\n        </div>\n\n    </>\n    )\n}\n\nDefaultLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n    bodyClass: PropTypes.string,\n    isHome: PropTypes.bool,\n    data: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n}\n\nconst DefaultLayoutSettingsQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettings {\n                allGhostSettings {\n                    edges {\n                        node {\n                            ...GhostSettingsFields\n                        }\n                    }\n                }\n                file(relativePath: {eq: \"ghost-icon.png\"}) {\n                    childImageSharp {\n                        fixed(width: 30, height: 30) {\n                            ...GatsbyImageSharpFixed\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <DefaultLayout data={data} {...props} />}\n    />\n)\n\nexport default DefaultLayoutSettingsQuery\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport { Tags } from '@tryghost/helpers-gatsby'\nimport { readingTime as readingTimeHelper } from '@tryghost/helpers'\n\nconst PostCard = ({ post }) => {\n    const url = `/${post.slug}/`\n    const readingTime = readingTimeHelper(post)\n\n    return (\n        <Link to={url} className=\"post-card\">\n            <header className=\"post-card-header\">\n                {post.feature_image &&\n                    <div className=\"post-card-image\" style={{\n                        backgroundImage: `url(${post.feature_image})` ,\n                    }}></div>}\n                {post.tags && <div className=\"post-card-tags\"> <Tags post={post} visibility=\"public\" autolink={false} /></div>}\n                {post.featured && <span>Featured</span>}\n                <h2 className=\"post-card-title\">{post.title}</h2>\n            </header>\n            <section className=\"post-card-excerpt\">{post.excerpt}</section>\n            <footer className=\"post-card-footer\">\n                <div className=\"post-card-footer-left\">\n                    <div className=\"post-card-avatar\">\n                        {post.primary_author.profile_image ?\n                            <img className=\"author-profile-image\" src={post.primary_author.profile_image} alt={post.primary_author.name}/> :\n                            <img className=\"default-avatar\" src=\"/images/icons/avatar.svg\" alt={post.primary_author.name}/>\n                        }\n                    </div>\n                    <span>{ post.primary_author.name }</span>\n                </div>\n                <div className=\"post-card-footer-right\">\n                    <div>{readingTime}</div>\n                </div>\n            </footer>\n        </Link>\n    )\n}\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        feature_image: PropTypes.string,\n        featured: PropTypes.bool,\n        tags: PropTypes.arrayOf(\n            PropTypes.shape({\n                name: PropTypes.string,\n            })\n        ),\n        excerpt: PropTypes.string.isRequired,\n        primary_author: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            profile_image: PropTypes.string,\n        }).isRequired,\n    }).isRequired,\n}\n\nexport default PostCard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nconst Pagination = ({ pageContext }) => {\n    const { previousPagePath, nextPagePath, humanPageNumber, numberOfPages } = pageContext\n\n    return (\n        <nav className=\"pagination\" role=\"navigation\">\n            <div>\n                {previousPagePath && (\n\n                    <Link to={previousPagePath} rel=\"prev\">\n                            Previous\n                    </Link>\n\n                )}\n            </div>\n            {numberOfPages > 1 && <div className=\"pagination-location\">Page {humanPageNumber} of {numberOfPages}</div>}\n            <div>\n                {nextPagePath && (\n\n                    <Link to={nextPagePath} rel=\"next\">\n                            Next\n                    </Link>\n                )}\n            </div>\n        </nav>\n    )\n}\n\nPagination.propTypes = {\n    pageContext: PropTypes.object.isRequired,\n}\n\nexport default Pagination\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\n/**\n* Navigation component\n*\n* The Navigation component takes an array of your Ghost\n* navigation property that is fetched from the settings.\n* It differentiates between absolute (external) and relative link (internal).\n* You can pass it a custom class for your own styles, but it will always fallback\n* to a `site-nav-item` class.\n*\n*/\nconst Navigation = ({ data, navClass }) => (\n    <>\n        {data.map((navItem, i) => {\n            if (navItem.url.match(/^\\s?http(s?)/gi)) {\n                return <a className={navClass} href={navItem.url} key={i} target=\"_blank\" rel=\"noopener noreferrer\">{navItem.label}</a>\n            } else {\n                return <Link className={navClass} to={navItem.url} key={i}>{navItem.label}</Link>\n            }\n        })}\n    </>\n)\n\nNavigation.defaultProps = {\n    navClass: `site-nav-item`,\n}\n\nNavigation.propTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            label: PropTypes.string.isRequired,\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n    navClass: PropTypes.string,\n}\n\nexport default Navigation\n","export { default as Layout } from './Layout'\nexport { default as PostCard } from './PostCard'\nexport { default as Pagination } from './Pagination'\nexport { default as Navigation } from './Navigation'\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nexport const getAuthorProperties = (primaryAuthor) => {\n    let authorProfiles = []\n\n    authorProfiles.push(\n        primaryAuthor.website ? primaryAuthor.website : null,\n        primaryAuthor.twitter ? `https://twitter.com/${primaryAuthor.twitter.replace(/^@/, ``)}/` : null,\n        primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook.replace(/^\\//, ``)}/` : null\n    )\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: primaryAuthor.name || null,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: primaryAuthor.profile_image || null,\n        facebookUrl: primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook.replace(/^\\//, ``)}/` : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport config from '../../../utils/siteConfig'\n\nconst ImageMeta = ({ image }) => {\n    if (!image) {\n        return null\n    }\n\n    return (\n        <Helmet>\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:image\" content={image} />\n            <meta property=\"og:image\" content={image} />\n            <meta property=\"og:image:width\" content={config.shareImageWidth} />\n            <meta property=\"og:image:height\" content={config.shareImageHeight} />\n        </Helmet >\n    )\n}\n\nImageMeta.propTypes = {\n    image: PropTypes.string,\n}\n\nexport default ImageMeta\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport { StaticQuery, graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport url from 'url'\n\nimport getAuthorProperties from './getAuthorProperties'\nimport ImageMeta from './ImageMeta'\nimport config from '../../../utils/siteConfig'\n\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\nconst ArticleMetaGhost = ({ data, settings, canonical }) => {\n    const ghostPost = data\n    settings = settings.allGhostSettings.edges[0].node\n\n    const author = getAuthorProperties(ghostPost.primary_author)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || ``\n    const shareImage = ghostPost.feature_image ? ghostPost.feature_image : _.get(settings, `cover_image`, null)\n    const publisherLogo = (settings.logo || config.siteIcon) ? url.resolve(config.siteUrl, (settings.logo || config.siteIcon)) : null\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={settings.title} />\n                <meta property=\"og:type\" content=\"article\" />\n                <meta property=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta property=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                {author.facebookUrl && <meta property=\"article:author\" content={author.facebookUrl} />}\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                {primaryTag && <meta name=\"twitter:label2\" content=\"Filed under\" />}\n                {primaryTag && <meta name=\"twitter:data2\" content={primaryTag} />}\n\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        ${shareImage ? `\"image\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${shareImage}\",\n                                \"width\": \"${config.shareImageWidth}\",\n                                \"height\": \"${config.shareImageHeight}\"\n                            },` : ``}\n                        \"publisher\": {\n                            \"@type\": \"Organization\",\n                            \"name\": \"${settings.title}\",\n                            \"logo\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${publisherLogo}\",\n                                \"width\": 60,\n                                \"height\": 60\n                            }\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${config.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={shareImage} />\n        </>\n    )\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        published_at: PropTypes.string.isRequired,\n        updated_at: PropTypes.string.isRequired,\n        meta_title: PropTypes.string,\n        meta_description: PropTypes.string,\n        primary_author: PropTypes.object.isRequired,\n        feature_image: PropTypes.string,\n        tags: PropTypes.arrayOf(\n            PropTypes.shape({\n                name: PropTypes.string,\n                slug: PropTypes.string,\n                visibility: PropTypes.string,\n            })\n        ),\n        primaryTag: PropTypes.shape({\n            name: PropTypes.string,\n        }),\n        og_title: PropTypes.string,\n        og_description: PropTypes.string,\n        twitter_title: PropTypes.string,\n        twitter_description: PropTypes.string,\n        excerpt: PropTypes.string.isRequired,\n    }).isRequired,\n    settings: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nconst ArticleMetaQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettingsArticleMeta {\n                allGhostSettings {\n                    edges {\n                        node {\n                            ...GhostSettingsFields\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <ArticleMetaGhost settings={data} {...props} />}\n    />\n)\n\nexport default ArticleMetaQuery\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { StaticQuery, graphql } from 'gatsby'\nimport url from 'url'\n\nimport ImageMeta from './ImageMeta'\nimport config from '../../../utils/siteConfig'\n\nconst WebsiteMeta = ({ data, settings, canonical, title, description, image, type }) => {\n    settings = settings.allGhostSettings.edges[0].node\n\n    const publisherLogo = url.resolve(config.siteUrl, (settings.logo || config.siteIcon))\n    let shareImage = image || data.feature_image || _.get(settings, `cover_image`, null)\n\n    shareImage = shareImage ? url.resolve(config.siteUrl, shareImage) : null\n\n    description = description || data.meta_description || data.description || config.siteDescriptionMeta || settings.description\n    title = `${title || data.meta_title || data.name || data.title} - ${settings.title}`\n\n    return (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={settings.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"${type}\",\n                        \"url\": \"${canonical}\",\n                        ${shareImage ? `\"image\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${shareImage}\",\n                                \"width\": \"${config.shareImageWidth}\",\n                                \"height\": \"${config.shareImageHeight}\"\n                            },` : ``}\n                        \"publisher\": {\n                            \"@type\": \"Organization\",\n                            \"name\": \"${settings.title}\",\n                            \"logo\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${publisherLogo}\",\n                                \"width\": 60,\n                                \"height\": 60\n                            }\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${config.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={shareImage} />\n        </>\n    )\n}\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        title: PropTypes.string,\n        feature_image: PropTypes.string,\n        description: PropTypes.string,\n        bio: PropTypes.string,\n        profile_image: PropTypes.string,\n    }).isRequired,\n    settings: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    type: PropTypes.oneOf([`WebSite`, `Series`]).isRequired,\n}\n\nconst WebsiteMetaQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettingsWebsiteMeta {\n                allGhostSettings {\n                    edges {\n                        node {\n                            ...GhostSettingsFields\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <WebsiteMeta settings={data} {...props} />}\n    />\n)\n\nexport default WebsiteMetaQuery\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport ImageMeta from './ImageMeta'\nimport getAuthorProperties from './getAuthorProperties'\nimport config from '../../../utils/siteConfig'\n\nconst AuthorMeta = ({ data, settings, canonical }) => {\n    settings = settings.allGhostSettings.edges[0].node\n\n    const author = getAuthorProperties(data)\n    const shareImage = author.image || _.get(settings, `cover_image`, null)\n    const title = `${data.name} - ${settings.title}`\n    const description = data.bio || config.siteDescriptionMeta || settings.description\n\n    return (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={settings.title} />\n                <meta property=\"og:type\" content=\"profile\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Person\",\n                        \"name\": \"${data.name}\",\n                        ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray},` : ``}\n                        \"url\": \"${canonical}\",\n                        ${shareImage ? `\"image\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${shareImage}\",\n                                \"width\": \"${config.shareImageWidth}\",\n                                \"height\": \"${config.shareImageHeight}\"\n                            },` : ``}\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${config.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={shareImage} />\n        </>\n    )\n}\n\nAuthorMeta.propTypes = {\n    data: PropTypes.shape({\n        name: PropTypes.string,\n        bio: PropTypes.string,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    settings: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nconst AuthorMetaQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettingsAuthorMeta {\n                allGhostSettings {\n                    edges {\n                        node {\n                            ...GhostSettingsFields\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <AuthorMeta settings={data} {...props} />}\n    />\n)\n\nexport default AuthorMetaQuery\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport url from 'url'\n\nimport config from '../../../utils/siteConfig'\nimport ArticleMeta from './ArticleMeta'\nimport WebsiteMeta from './WebsiteMeta'\nimport AuthorMeta from './AuthorMeta'\n\n/**\n* MetaData will generate all relevant meta data information incl.\n* JSON-LD (schema.org), Open Graph (Facebook) and Twitter properties.\n*\n*/\nconst MetaData = ({\n    data,\n    settings,\n    title,\n    description,\n    image,\n    location,\n}) => {\n    const canonical = url.resolve(config.siteUrl, location.pathname)\n    const { ghostPost, ghostTag, ghostAuthor, ghostPage } = data\n    settings = settings.allGhostSettings.edges[0].node\n\n    if (ghostPost) {\n        return (\n            <ArticleMeta\n                data={ghostPost}\n                canonical={canonical}\n            />\n        )\n    } else if (ghostTag) {\n        return (\n            <WebsiteMeta\n                data={ghostTag}\n                canonical={canonical}\n                type=\"Series\"\n            />\n        )\n    } else if (ghostAuthor) {\n        return (\n            <AuthorMeta\n                data={ghostAuthor}\n                canonical={canonical}\n            />\n        )\n    } else if (ghostPage) {\n        return (\n            <WebsiteMeta\n                data={ghostPage}\n                canonical={canonical}\n                type=\"WebSite\"\n            />\n        )\n    } else {\n        title = title || config.siteTitleMeta || settings.title\n        description = description || config.siteDescriptionMeta || settings.description\n        image = image || settings.cover_image || null\n\n        image = image ? url.resolve(config.siteUrl, image) : null\n\n        return (\n            <WebsiteMeta\n                data={{}}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type=\"WebSite\"\n            />\n        )\n    }\n}\n\nMetaData.defaultProps = {\n    data: {},\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.object,\n        ghostTag: PropTypes.object,\n        ghostAuthor: PropTypes.object,\n        ghostPage: PropTypes.object,\n    }).isRequired,\n    settings: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n}\n\nconst MetaDataQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettingsMetaData {\n                allGhostSettings {\n                    edges {\n                        node {\n                            title\n                            description\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <MetaData settings={data} {...props} />}\n    />\n)\n\nexport default MetaDataQuery\n","export { default as MetaData } from './MetaData'\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}